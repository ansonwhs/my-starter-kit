{
  // This copmlier options is design without thinking of using Class in JS. So there are lots of property about Class being ignored.
  "compilerOptions": {
    "rootDir": ".",
    "strict": true, // Should always keep it true as it will make 'alwaysStrict' & 'noImplicitAny' default to be true. 'noImplicitAny' restrict user to define types which typescript cannot be inferred.
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "allowUnreachableCode": false, // Do not allow unreachable code
    "noFallthroughCasesInSwitch": true, // Switch statement must have "break", "return" like statement
    "noImplicitReturns": true, // make sure function return type and code return in the same
    "noUnusedLocals": true, // shouldn't have unused local variables
    "noUnusedParameters": true, // shouldn't have unused parameter
    "noPropertyAccessFromIndexSignature": true, // when there is no implicit field defined in type, user must use a['xxx'] instead of a.xxx
    "noUncheckedIndexedAccess": true, // supplement property of 'noPropertyAccessFromIndexSignature'. For no implicit field called, typescript will add undefined type.
  },
  "include": [
    "src/**/*.(ts|tsx)"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "exclude": [
    "./node_modules/**/*"
  ]
}