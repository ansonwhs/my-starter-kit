module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs', 'src/**/*.test.ts', 'src/**/*.test.tsx'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],
    'array-callback-return': ['error', { checkForEach: true, allowVoid: true }],
    // Possible Problems
    'no-await-in-loop': 'error',
    'no-constant-binary-expression': 'error',
    'no-duplicate-imports': 'error',
    'no-promise-executor-return': 'warn',
    'no-self-compare': 'error',
    'no-template-curly-in-string': 'warn',
    'no-unmodified-loop-condition': 'error',
    'no-unreachable-loop': 'error',
    'no-use-before-define': 'error',
    'require-atomic-updates': 'error',
    // Suggestions
    'arrow-body-style': ['error', ' as-needed'],
    'block-scoped-var': 'error',
    'camelcase': ['error', { properties: 'always', ignoreImports: true, ignoreGlobals: true }],
    'complexity': ['error', 15],
    'consistent-return': ['error', { treatUndefinedAsUnspecified: true }],
    'curly': ['error', 'multi-line'],
    'default-case': 'error',
    'default-case-last': 'error',
    'default-param-last': 'error',
    'dot-notation': 'error',
    'eqeqeq': ['error', 'always'],
    'func-name-matching': 'warn',
    'func-names': 'warn',
    'func-style': ['warn', 'declaration', { allowArrowFunctions: true }],
    'guard-for-in': 'warn',
    'id-denylist': ['error', 'callback'],
    'id-length': ['warn', { min: 2, max: 20, exceptions: ['e'] }], // force variable name to be at least 2 char.
    'id-match': ["error", "^[a-z]+([A-Z][a-z]+)*$"], // force variable name to be camelcase.
    'init-declarations': ['error', 'always'],
    'max-depth': ['error', 4],
    'max-lines': ['error', { max: 350, skipBlankLines: true, skipComments: true }],
    'max-lines-per-function': ['error', { max: 200, skipBlankLines: true, skipComments: true, IIFEs: true }], // for react, function component is often used. 200 lines per component is make sense under single responsiblilty rules.
    'max-nested-callbacks': ['error', 3],
    'max-params': ['error', 5],
    'multiline-comment-style': ['warn', 'starred-block'],
    'new-cap': ['error', { newIsCapExceptions: true, newIsCapExceptionPattern: true }],
    'no-alert': 'warn',
    'no-array-constructor': 'error',
    'no-caller': 'error',
    'no-console': 'error', // in frontend, console should be disallowed. console.warn and error is not allowed as well which should have enough error handling.
    'no-else-return': 'error', // to reduce else statement
    'no-empty-function': 'error',
    'no-eq-null': 'error',
    'no-eval': 'error',
    'no-extra-boolean-cast': ['error', { enforceForLogicalOperands: true }],
    'no-global-assign': 'error',
    'no-implicit-coercion': ['error', { disallowTemplateShorthand: true, allow: ['!!', '+', '-'] }],
    'no-implied-eval': 'error',
    'no-iterator': 'error',
    'no-label-var': 'error',
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-loop-func': 'error',
    'no-magic-numbers': 'warn',
    'no-multi-assign': 'error',
    'no-negated-condition': 'error',
    'no-nested-ternary': 'error',
    'no-new-func': 'error',
    'no-new-wrappers': 'error',
    'no-object-constructor': 'error',
    'no-octal-escape': 'error',
    'no-param-reassign': 'error',
    'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
    'no-proto': 'error',
    'no-return-assign': ['error', 'always']
  },
}
